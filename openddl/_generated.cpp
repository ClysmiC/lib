// NOTE - This file is auto-generated by hgen. DO NOT MODIFY!

// openddl.h

inline bool IsDerivedType(StructureType type);
inline bool IsRecognizedDerivedType(StructureType type);
inline StructureListReader CreateStructureListReader(Slice<Structure> structures);
inline Structure * PeekStructure(StructureListReader * reader);
inline Structure * NextStructure(StructureListReader * reader);
inline Structure * MatchPeekStructure(StructureListReader * reader, StructureType type);
inline Structure * MatchNextStructure(StructureListReader * reader, StructureType type);
inline PropertyListReader CreatePropertyListReader(Slice<Property> properties);

// openddl.cpp

internal Structure * ResolveFirstNameInReferencePathGlobal(String path, Slice<Structure> globalRoot, String * poPathAfterResolve);
internal Structure * ResolveFirstNameInReferencePathLocal(String path, DerivedStructure * parent, String * poPathAfterResolve);
internal bool ResolveReference(RefValue * ref, DerivedStructure * parent, Slice<Structure> globalRoot);
internal bool ResolveAllReferences(DerivedStructure * parent, Slice<Structure> globalRoot);
internal void SetParentPointers(Structure * parent, Slice<Structure> children);
internal OpenDdlResult ImportOpenDdlFileContents(char * fileContents, MemoryRegion memory, DerivedMappings derivedMappings);

// parse.cpp

internal u64 ParseDecimalLiteral(Scanner * scanner, bool * poSuccess);
internal f64 ParseDecimalFloatLiteral(Scanner * scanner, bool * poSuccess);
internal u64 ParseHexLiteral(Scanner * scanner, bool * poSuccess);
internal u64 ParseOctalLiteral(Scanner * scanner, bool * poSuccess);
internal u64 ParseBinaryLiteral(Scanner * scanner, bool * poSuccess);
inline u8 HexDigitToByte(char c);
internal bool WriteEscapedCharAndAdvanceCursors(char ** src, char ** dst, bool allowExtendedByteSequences, bool allow_x00);
internal bool IsValidUtf8CodePoint(u32 codePoint);
internal String ParseStringLiteral(Scanner * scanner, MemoryRegion memory);
internal u64 ParseCharLiteral(Scanner * scanner, bool * poSuccess);
internal u64 ParseUInt(Scanner * scanner, PrimitiveDataType dataType, bool * poSuccess);
internal bool ParseBool(Scanner * scanner, bool * poSuccess);
internal s64 ParseInt(Scanner * scanner, PrimitiveDataType dataType, bool * poSuccess);
internal f64 ParseFloat(Scanner * scanner, PrimitiveDataType dataType, bool * poSuccess);
internal String ParseName(Scanner * scanner);
internal String ParseIdentifier(Scanner * scanner);
internal PrimitiveDataType PrimitiveDataTypeFromReservedWordToken(Token token);
internal PrimitiveDataType ParsePrimitiveDataType(Scanner * scanner);
internal RefValue ParseRef(Scanner * scanner);
internal int cBytesFromPrimitiveDataType(PrimitiveDataType dataType);
internal PrimitiveValue ParsePrimitiveValue(Scanner * scanner, MemoryRegion memory, PrimitiveDataType dataType);
internal bool ParseDataListKnownLength(Scanner * scanner, MemoryRegion memory, PrimitiveDataType dataType, int cntValueExpected, u8 * poResult);
internal DataListUnknownLength ParseDataListUnknownLength(Scanner * scanner, MemoryRegion memory, PrimitiveDataType dataType);
internal DataArrayList ParseDataArrayList(Scanner * scanner, MemoryRegion memory, PrimitiveDataType dataType, int cntValuePerSubarray, PrimitiveStructureType structureType);
internal bool ParsePrimitiveStructure(Scanner * scanner, Structure * poStructure, MemoryRegion memory);
internal Property ParseProperty(Scanner * scanner, MemoryRegion memory, DerivedMappings * derivedMappings);
internal bool ParseDerivedStructure(Scanner * scanner, Structure * poStructure, StructureId * idNext, MemoryRegion memory, DerivedMappings * derivedMappings);
internal Structure ParseStructure(Scanner * scanner, StructureId * idNext, MemoryRegion memory, DerivedMappings * derivedMappings);

// scan.cpp

internal void MaybeTransformIdentifierIntoReservedWord(Token * token);
inline int ConsumeWhitespaceAndComments(Scanner * scanner);
inline bool IsDecimalDigit(char c);
inline bool IsNumberSeparator(char c);
inline bool IsDecimalDigitOrSeparator(char c);
inline bool IsHexDigit(char c);
inline bool IsHexDigitOrSeparator(char c);
inline bool IsOctalDigit(char c);
inline bool IsOctalDigitOrSeparator(char c);
inline bool IsBinaryDigit(char c);
inline bool IsBinaryDigitOrSeparator(char c);
internal int ConsumeDecimalDigitsAndSeparators(Scanner * scanner);
internal int ConsumeHexDigitsAndSeparators(Scanner * scanner);
internal int ConsumeOctalDigitsAndSeparators(Scanner * scanner);
internal int ConsumeBinaryDigitsAndSeparators(Scanner * scanner);
inline bool IsLegalStartOfIdentifier(char c);
inline bool IsLegalAfterStartOfIdentifier(char c);
internal int ConsumeLegalCharsAfterStartOfIdentifier(Scanner * scanner);
internal Token NextToken(Scanner * scanner);
internal Token PeekToken(Scanner * scanner);
internal bool MatchPeekToken(Scanner * scanner, TokenType type, Token * poToken=nullptr);
internal bool MatchNextToken(Scanner * scanner, TokenType type, Token * poToken=nullptr);
inline bool IsAtEofToken(Scanner * scanner);
